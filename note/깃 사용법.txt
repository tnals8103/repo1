
# Git

- .git 폴더가 위치한 폴더의 모든 내용을 관리해주는 프로그램
- .git 폴더를 생성한 곳을 Repository라고 부른다
- .git 폴더 내부에는 관리하는 Repository의 모든 정보가 기록되어 있다
- .git에 저장된 기록을 활용하여 관리하는 Repository를 예전 모습으로 되돌릴 수 있다
- Git은 Repository 내부의 무언가가 아주 약간만 변해도 모두 알아채고 관리해준다
- Eclipse에는 Egit이라는 프로그램이 내장되어 있다

# Commit

- 레포지토리 내부의 변경 사항을 확정짓는 명령어
- 커밋한 시점은 복구 지점이 된다
- 체크 아웃 명령을 통해 언제든지 원하는 커밋으로 현재 상태(HEAD)를 옮겨 다닐 수 있다


# staged와 unstaged의 차이점

- 가장 최근의 커밋 이후로 변화가 있었던 파일들은 모두 unstaged 상태가 된다
  (이 때 .gitignore에 등록된 파일들은 변경 사항이 있어도 unstaged 되지 않는다
- unstaged 상태인 변화들 중 이번 커밋에 포함시키고 싶은 것들만 골라서
  staged 상태로 변경 후 커밋을 진행할 수 있다
- 커밋 당시 unstaged 상태로 남겨놓는 파일들은 아직 더 만들어야 하는 코드들이고,
  staged 상태로 포함시킨 파일들은 다 만들어져서 상태를 보관하고자 하는 코드들이다
  
# .gitignore

- .gitignore 파일에 작성해둔 패턴과 일치하는 파일들은 Git의 관리 대상에서 제외된다
- Eclipse 프로젝트를 사용할 때는 Eclipse 관련 파일들을 등록해놓는 것이 좋다

# Branch

- 하나의 레포지토리를 다양한 형태로 보관할 수 있는 기능
- 다른 브랜치로 변경하는 것도 체크아웃이라고 한다
- 커밋하지 않은 상태로 다른 브랜치로 체크아웃하면 모든 작업내용이 사라지므로 주의해야 한다

# Merge

- 한 브랜치를 다른 브랜치와 합치는 것
- 합칠 때 한 파일의 같은 부분을 수정했다면 충돌(conflict)이 발생한다
- 머지 도중 충돌이 발생한 경우 두 브랜치의 내용 중 하나를 선택하는 심사 과정을 거쳐야 한다
- 충돌이 없는 경우 쉽게 합쳐지기 때문에 같은 파일만 건드리지 않는다면 큰 문제는 발생하지 않는다

# Github

- 레포지토리를 원격지에 존재하는 컴퓨터에 저장해놓고 필요할때마다 내 컴퓨터로 복사해서 사용할 수 있다
- 현재 컴퓨터에 존재하는 레포지토리를 로컬(local) 레포지토리라고 한다
- 다른 곳에 다운로드하기 위해 보관해 놓는 레포지토리를 원격(Remote) 레포지토리라고 한다
- Github는 원격 레포지토리를 쉽게 생성하고 대신 보관해주며 관리해주는 웹 사이트다

# push

- 로컬에서 작업한 레포지토리를 원격 레포지토리에 업로드 하는 것

# pull
- 로컬 레포지토리의 내용이 원격보다 뒤쳐져 있는 경우 원격에서 가져오는 것(업데이트 받는 것)

# clone

- 원격 레포지토리를 전부 복사해서 그대로 로컬에 가져오는 것



  